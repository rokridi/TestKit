# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#
# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane
default_platform(:ios)

platform :ios do
  lane :build_framework do
    build_app(
        scheme: "TestKit",
        skip_package_ipa: true,
        skip_archive: true,
        skip_codesigning: true,
        silent: true, # less logs
        clean: true,
        sdk: "iphonesimulator",
        output_directory: "./output/build",
        derived_data_path: "./output/DerivedData"
    )
  end

  lane :build_framework_for_testing do
    scan(
      scheme: "TestKit",
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      build_for_testing: true,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "./output/DerivedData",
      output_directory: "./output/tests"
    )
  end

  lane :build_demo do
      build_ios_app(
        scheme: "TestKitDemo",
        skip_package_ipa: true,
        skip_archive: true,
        skip_codesigning: true,
        silent: true, # less logs
        clean: false,
        sdk: "iphonesimulator",
        output_directory: "./output/build",
        derived_data_path: "./output/DerivedData"
      )
  end

  lane :build_demo_for_testing do
      scan(
      scheme: "TestKitDemo",
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      build_for_testing: true,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "./output/DerivedData",
      output_directory: "./output/tests"
    )
  end

  lane :ui_tests do |options|
    scheme = options[:scheme]
    scan(
      scheme: "TestKitDemoUITests",
      only_testing: "TestKitDemoUITests",
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "./output/DerivedData",
      output_directory: "./output/tests"
    )
  end

  lane :build_for_testing do |options|
    scheme = options[:scheme]
    scan(
      scheme: scheme,
      only_testing: scheme,
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      build_for_testing: true,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "./output/DerivedData",
      output_directory: "./output/tests"
    )
  end

  lane :test_plan_ do |options|
    scheme = options[:scheme]
    testplan = options[:testplan]
    scan(
      scheme: scheme,
      only_testing: scheme,
      testplan: testplan,
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      test_without_building: true,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "../output/DerivedData",
      output_directory: "../output/tests"
    )
  end

  lane :ui_tests_test_plan_xctestrun do |options|
    testplan = options[:testplan]
    xctestrun_file_path = "./output/DerivedData/Build/Products/"+xctestrun_file_path(testplan: testplan)
    scan(
      scheme: "TestKitDemoUITests",
      only_testing: "TestKitDemoUITests",
      xctestrun: xctestrun_file_path,
      clean: false,
      result_bundle: true,
      skip_build: true,
      parallel_testing: true,
      test_without_building: true,
      code_coverage: true,
      #testplan: testplan,
      sdk: "iphonesimulator",
      device: "iPhone 11",
      derived_data_path: "./output/DerivedData",
      output_directory: "./output/tests"
    )
  end

  lane :xctestrun_file_path do |options|
    testplan = options[:testplan]
    xctestrun_directory_path = "./output/DerivedData/Build/Products/"
    xctestrunFilePath = sh("find ../output/DerivedData/Build/Products -type f -iname *"+testplan+"*.xctestrun")
    sh("echo $(basename "+xctestrunFilePath+") | tr -d '\n'")
  end

  lane :pipeline do
    build_framework_for_testing
    build_demo_for_testing
    ui_tests_test_plan_xctestrun(testplan: "TestKitDemoUITestsPlan0")
    ui_tests_test_plan_xctestrun(testplan: "TestKitDemoUITestsPlan1")
    xcov(
      project: "TestKit.xcodeproj",
      scheme: "TestKitDemoUITests", 
      include_test_targets: true,
      output_directory: "./output/xcov"
      )
    #ui_tests_test_plan_xctestrun(testplan: "TestKitDemoUITestsPlan1")
  end

  desc "Clean"
  lane :clean do
    `rm -rf ../output`
    UI.user_error!("Fail to 'm -rf output'") unless $?.success?
  end
end
